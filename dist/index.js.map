{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["type SortedArrayParams = DataSet | SortedArrayConfig;\ntype TypeArray<Type> = Type extends unknown ? Type[] : never;\nexport type DataObject = Record<string | number, unknown>;\nexport type DataItem = number | string | DataObject | Array<unknown>;\nexport type SortCallback = (a: DataItem, b: DataItem) => number;\nexport type DataSet = TypeArray<DataItem>;\n\ninterface SortedArrayConfig {\n  sortCallback?: SortCallback;\n  data?: DataSet;\n}\n\n/**\n * Maintains a sorted array of data.\n */\nclass SortedArray {\n  #data: DataSet;\n  #sortCallback: SortCallback;\n  #config: SortedArrayParams = {\n    data: [],\n    sortCallback: this.#fnSortDefault,\n  };\n\n  /**\n   * Default sorting algo. Straight comparison of values.\n   *\n   * @param a - Comparator to sort against.\n   * @param b - Comparator to sort against.\n   * @returns One of [0.1,-1] to determine sort order.\n   */\n  #fnSortDefault(a: DataItem, b: DataItem): number {\n    const isEqual = a === b;\n\n    return isEqual ? 0 : a > b ? 1 : -1;\n  }\n\n  /**\n   * Runs sortCallback on the instance data.\n   */\n  #sort(): void {\n    this.#data.sort(this.#sortCallback);\n  }\n\n  /**\n   * Define initial data, sort algo, and perform initial sort.\n   *\n   * @param params - An intitial data array or a config object.\n   */\n  constructor(params: SortedArrayParams = {}) {\n    if (Array.isArray(params)) {\n      params = { data: params };\n    }\n\n    const { data, sortCallback } = { ...this.#config, ...params };\n    const isFunction = typeof sortCallback === 'function';\n\n    this.#data = data;\n\n    this.#sortCallback = isFunction ? sortCallback : this.#fnSortDefault;\n\n    if (this.#data.length) {\n      this.#sort();\n    }\n  }\n\n  /**\n   * Add a new element to the instance data.\n   *\n   * @param item - Input to append to the instance data.\n   */\n  add(item: DataItem): void {\n    const d: DataItem[] = this.#data;\n\n    d.push(item);\n    this.#sort();\n  }\n\n  /**\n   * Modify an existing element in the instance data.\n   *\n   * @param index - Post-sort array index of the data to update.\n   * @param item - The data to replace the instance entry at that index.\n   */\n  edit(index: number, item: DataItem): void {\n    this.#data[index] = item;\n    this.#sort();\n  }\n\n  /**\n   * Delete an element from the data.\n   *\n   * @param index - The index of the sorted data to pull.\n   */\n  delete(index: number): void {\n    this.#data.splice(index, 1);\n  }\n\n  /**\n   * @returns The sorted instance data.\n   */\n  get list(): DataSet {\n    return this.#data;\n  }\n}\n\nexport default SortedArray;\n"],"names":["a","b","_sort2","_classPrivateFieldGet","sort","this","_sortCallback","constructor","params","_classPrivateMethodInitSpec","_sort","_fnSortDefault","_classPrivateFieldInitSpec","_data","writable","value","_config","data","sortCallback","_fnSortDefault2","Array","isArray","isFunction","_classPrivateFieldSet","_classPrivateMethodGet","length","call","add","item","push","edit","index","delete","splice","list"],"mappings":"2gCA8BiBA,EAAaC,GAG1B,OAFgBD,IAAMC,EAEL,EAAID,EAAIC,EAAI,GAAK,CACnC,CAKa,SAAAC,IACZC,EAAWC,KAAAA,GAAAA,OAAKC,KAAhBC,GACD,QA1BH,MAiCEC,cAA4C,IAAhCC,yDAA4B,CAAA,EAAIC,EAAAJ,KAAAK,GAAAD,EAAAJ,KAAAM,GAAAC,EAAAP,KAAAQ,EAAA,CAAAC,UAAA,EAAAC,WAAA,IAAAH,EAAAP,KAAAC,EAAA,CAAAQ,UAAA,EAAAC,WAAA,IAAAH,EAAAP,KAAAW,EAAA,CAAAF,UAAA,EAAAC,MA9Bf,CAC3BE,KAAM,GACNC,eAAcb,KAAFM,EAAAQ,MA6BRC,MAAMC,QAAQb,KAChBA,EAAS,CAAES,KAAMT,IAGnB,MAAMS,KAAEA,EAAFC,aAAQA,GAAiB,IAAKf,EAAAE,KAALW,MAAsBR,GAC/Cc,EAAqC,mBAAjBJ,EAE1BK,EAAAlB,KAAAQ,EAAaI,GAEbM,EAAAlB,KAAAC,EAAqBgB,EAAaJ,EAAHM,EAAkBnB,KAAjDM,EAAAQ,IAEIhB,EAAAE,KAAAQ,GAAWY,QACbD,EAAAnB,KAAAK,EAAAR,GAAAwB,KAAArB,KAEH,CAODsB,IAAIC,GACoBzB,EAAAE,KAAtBQ,GAEEgB,KAAKD,GACPJ,EAAAnB,KAAAK,EAAAR,GAAAwB,KAAArB,KACD,CAQDyB,KAAKC,EAAeH,GAClBzB,EAAW4B,KAAAA,GAAAA,GAASH,EACpBJ,EAAAnB,KAAAK,EAAAR,GAAAwB,KAAArB,KACD,CAOD2B,OAAOD,GACL5B,EAAAE,KAAAQ,GAAWoB,OAAOF,EAAO,EAC1B,CAKGG,WACF,OAAA/B,EAAOE,KAAPQ,EACD"}