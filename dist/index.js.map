{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["export type SortedArrayParams = DataSet | SortedArrayConfig;\n/**\n * Iterates over all iterations of {@link DataItem}, typing each to an array. TypeScript will not allow you to mix types _in_ the array.\n *\n * @packageDocumentation\n */\nexport type TypeArray<Type> = Type extends unknown ? Type[] : never;\nexport type DataSet = TypeArray<DataItem>;\n/** Any Object Literal. May convert `unknown` to `any`. */\nexport type DataObject = Record<string | number, unknown>;\n/** Base units of info that can be added to a sorted array. */\nexport type DataItem = number | string | DataObject | Array<unknown>;\n/**\n * Sorting algorithm.\n * @param a - Comparator to sort against.\n * @param b - Comparator to sort against.\n * @returns One of `[0.1,-1]` to determine sort order.\n */\nexport type SortCallback = (a: DataItem, b: DataItem) => number;\n\nexport interface SortedArrayConfig {\n  /** The override sort method.  */\n  sortCallback?: SortCallback;\n  /** Seeded data. */\n  data?: DataSet;\n}\n\n/**\n * Maintains a sorted array of data.\n */\nexport class SortedArray {\n  // TODO: Add reset/replace functionality.\n  // TODO: Add sort algo setter/replacer.\n\n  /** The instance state. The whole reason we’re here.*/\n  #data: DataSet;\n  /** The sorting algorithm used in this instance. */\n  #sortCallback: SortCallback;\n  /** Default settings. */\n  #config: SortedArrayParams = {\n    data: [],\n    /** @defaultValue Base algo if one isn’t provided. */\n    sortCallback: this.#fnSortDefault,\n  };\n\n  /**\n   * {@inheritDoc SortCallback}\n   */\n  #fnSortDefault(a: DataItem, b: DataItem): number {\n    // TODO: Throw a warning if comparing non-primary objects.\n    const isEqual = a === b;\n\n    return isEqual ? 0 : a > b ? 1 : -1;\n  }\n\n  /**\n   * Applies {@link SortCallback} on the instance data.\n   *\n   * @returns Sorted Data {@link DataSet}\n   * @internal\n   */\n  #sort(): DataSet {\n    return this.#data.sort(this.#sortCallback);\n  }\n\n  /**\n   * Define initial data, sort algo, and perform initial sort.\n   *\n   * @param params - An intitial {@link DataSet | data array} or a {@link SortedArrayConfig | config object}.\n   */\n  constructor(params: SortedArrayParams = {}) {\n    if (Array.isArray(params)) {\n      params = { data: params };\n    }\n\n    const { data, sortCallback } = { ...this.#config, ...params };\n    const isFunction = typeof sortCallback === 'function';\n\n    this.#data = data;\n\n    this.#sortCallback = isFunction ? sortCallback : this.#fnSortDefault;\n\n    if (this.#data.length) {\n      this.#sort();\n    }\n  }\n\n  /**\n   * Add a new element to the instance data.\n   *\n   * @param item - Input to append to the instance data.\n   * @returns Sorted Array {@link DataSet}\n   *\n   * @example\n   * ```ts\n   * const sortedArray = new SortedArray([5, 2]);\n   * sortedArray.add(3); // returns [2,3,5]\n   * ```\n   *\n   * @public\n   */\n  add(item: DataItem): DataSet {\n    //TODO: Accept a single element or an array of elements.\n    const d: DataItem[] = this.#data;\n\n    d.push(item);\n    return this.#sort();\n  }\n\n  /**\n   * Modify an existing element in the instance data.\n   *\n   * @param index - **Sorted** index of the array to update.\n   * @param item - The data to replace the instance entry at that index.\n   * @returns Sorted array of {@link DataItem | DataItem}\n   *\n   * @example\n   * ```ts\n   * const fruit = new SortedArray(['apples','pizza','bananas']);\n   * const output = fruit.edit(2, 'peaches'); // Index is the _sorted_ array index.\n   * console.log(output); // returns ['apples','bananas','peaches']\n   * ```\n   *\n   * @public\n   */\n  edit(index: number, item: DataItem): DataSet {\n    this.#data[index] = item;\n    return this.#sort();\n  }\n\n  /**\n   * Delete an element from the instance data.\n   *\n   * @param index - **Sorted** index of the array to delete.\n   * @returns Sorted Array {@link DataSet}\n   *\n   * @remarks\n   * This is a departure from the return value of `Array.prototype.splice()`, which returns an array of the _deleted_ elements. Here, we keep to the pattern and return the _new_ array.\n   *\n   * @example\n   * ```ts\n   * const fruit = new SortedArray(['banana', 'pineapple', 'cheese']);\n   * fruit.delete(1); //returns ['banana','pineapple'];\n   * ```\n   *\n   * @public\n   */\n  delete(index: number): DataSet {\n    this.#data.splice(index, 1);\n    return this.log;\n  }\n\n  /**\n   * Getter to return the sorted data.\n   *\n   * @returns The sorted instance data.\n   *\n   * @example\n   * ```ts\n   * const fruit = new SortedArray(['banana', 'pineapple', 'apple']);\n   * fruit.log; //returns ['apple','banana','pineapple']\n   * ```\n   *\n   * @public\n   */\n  get log(): DataSet {\n    return this.#data;\n  }\n}\n"],"names":["a","b","_sort2","_classPrivateFieldGet","sort","this","_sortCallback","constructor","params","_classPrivateMethodInitSpec","_sort","_fnSortDefault","_classPrivateFieldInitSpec","_data","writable","value","_config","data","sortCallback","_fnSortDefault2","Array","isArray","isFunction","_classPrivateFieldSet","_classPrivateMethodGet","length","call","add","item","push","edit","index","delete","splice","log"],"mappings":"khCAgDiBA,EAAaC,GAI1B,OAFgBD,IAAMC,EAEL,EAAID,EAAIC,EAAI,GAAK,CACnC,CAQgB,SAAAC,IACf,OAAOC,EAAWC,KAAAA,GAAAA,KAAKD,EAAAE,KAAvBC,GACD,eAjCI,MAwCLC,cAA4C,IAAhCC,yDAA4B,CAAA,EAAIC,EAAAJ,KAAAK,GAAAD,EAAAJ,KAAAM,GAAAC,EAAAP,KAAAQ,EAAA,CAAAC,UAAA,EAAAC,WAAA,IAAAH,EAAAP,KAAAC,EAAA,CAAAQ,UAAA,EAAAC,WAAA,IAAAH,EAAAP,KAAAW,EAAA,CAAAF,UAAA,EAAAC,MA/Bf,CAC3BE,KAAM,GAENC,eAAcb,KAAFM,EAAAQ,MA6BRC,MAAMC,QAAQb,KAChBA,EAAS,CAAES,KAAMT,IAGnB,MAAMS,KAAEA,EAAFC,aAAQA,GAAiB,IAAKf,EAAAE,KAALW,MAAsBR,GAC/Cc,EAAqC,mBAAjBJ,EAE1BK,EAAAlB,KAAAQ,EAAaI,GAEbM,EAAAlB,KAAAC,EAAqBgB,EAAaJ,EAAHM,EAAkBnB,KAAjDM,EAAAQ,IAEIhB,EAAAE,KAAAQ,GAAWY,QACbD,EAAAnB,KAAAK,EAAAR,GAAAwB,KAAArB,KAEH,CAgBDsB,IAAIC,GAKF,OAHsBzB,EAAAE,KAAtBQ,GAEEgB,KAAKD,GACAJ,EAAAnB,eAAAA,KACR,CAkBDyB,KAAKC,EAAeH,GAElB,OADAzB,EAAW4B,KAAAA,GAAAA,GAASH,EACbJ,EAAAnB,eAAAA,KACR,CAmBD2B,OAAOD,GAEL,OADA5B,EAAAE,KAAAQ,GAAWoB,OAAOF,EAAO,GAClB1B,KAAK6B,GACb,CAeGA,UACF,OAAA/B,EAAOE,KAAPQ,EACD"}